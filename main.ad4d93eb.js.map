{"version":3,"sources":["scripts/main.js"],"names":["document","addEventListener","table","querySelector","form","notification","currentSortColumn","sortDirection","saveEdit","cell","input","newValue","value","trim","isNaN","parseFloat","cellIndex","formattedValue","toLocaleString","style","currency","minimumFractionDigits","textContent","defaultValue","showNotification","title","message","type","innerHTML","classList","add","setTimeout","remove","querySelectorAll","forEach","header","index","rows","Array","from","slice","isAsc","sort","a","b","aText","children","bText","localeCompare","row","appendChild","e","target","tagName","parentElement","preventDefault","nameVal","name","position","office","age","parseInt","salary","length","formattedSalary","newRow","createElement","reset","focus","evt","key"],"mappings":"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","file":"main.ad4d93eb.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const table = document.querySelector('table tbody');\n  const form = document.querySelector('.new-employee-form');\n  const notification = document.querySelector('.notification');\n  let currentSortColumn = null;\n  let sortDirection = 'asc';\n\n  document.querySelectorAll('thead th').forEach((header, index) => {\n    header.addEventListener('click', () => {\n      const rows = Array.from(table.querySelectorAll('tr')).slice();\n      const isAsc = currentSortColumn === index && sortDirection === 'asc';\n\n      rows.sort((a, b) => {\n        const aText = a.children[index].textContent.trim();\n        const bText = b.children[index].textContent.trim();\n\n        return isAsc ? aText.localeCompare(bText) : bText.localeCompare(aText);\n      });\n\n      currentSortColumn = index;\n      sortDirection = isAsc ? 'desc' : 'asc';\n      rows.forEach((row) => table.appendChild(row));\n    });\n  });\n\n  table.addEventListener('click', (e) => {\n    if (e.target.tagName === 'TD') {\n      table\n        .querySelectorAll('tr')\n        .forEach((row) => row.classList.remove('active'));\n      e.target.parentElement.classList.add('active');\n    }\n  });\n\n  form.addEventListener('submit', (e) => {\n    e.preventDefault();\n\n    const nameVal = form.name.value.trim();\n    const position = form.position.value.trim();\n    const office = form.office.value;\n    const age = parseInt(form.age.value, 10);\n    const salary = parseFloat(form.salary.value);\n\n    if (nameVal.length < 4) {\n      showNotification(\n        'Error',\n        'Name must be at least 4 letters long.',\n        'error',\n      );\n\n      return;\n    }\n\n    if (age < 18 || age > 90) {\n      showNotification('Error', 'Age must be between 18 and 90.', 'error');\n\n      return;\n    }\n\n    if (isNaN(salary) || salary < 0) {\n      showNotification('Error', 'Invalid salary value.', 'error');\n\n      return;\n    }\n\n    // Format salary with commas and 2 decimal places\n    const formattedSalary = salary.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n    });\n\n    const newRow = document.createElement('tr');\n\n    newRow.innerHTML = `\n            <td>${nameVal}</td>\n            <td>${position}</td>\n            <td>${office}</td>\n            <td>${age}</td>\n            <td>${formattedSalary}</td>\n        `;\n    table.appendChild(newRow);\n    showNotification('Success', 'New employee added successfully!', 'success');\n\n    form.reset();\n  });\n\n  table.addEventListener('dblclick', (e) => {\n    if (e.target.tagName === 'TD') {\n      const cell = e.target;\n      const input = document.createElement('input');\n\n      input.value = cell.textContent.trim();\n      input.classList.add('cell-input');\n\n      cell.innerHTML = '';\n      cell.appendChild(input);\n      input.focus();\n\n      input.addEventListener('blur', () => saveEdit(cell, input));\n\n      input.addEventListener('keypress', (evt) => {\n        if (evt.key === 'Enter') {\n          saveEdit(cell, input);\n        }\n      });\n    }\n  });\n\n  function saveEdit(cell, input) {\n    const newValue = input.value.trim();\n\n    if (newValue && !isNaN(parseFloat(newValue))) {\n      // Format salary if it's a salary cell\n      if (cell.cellIndex === 4) {\n        const formattedValue = parseFloat(newValue).toLocaleString('en-US', {\n          style: 'currency',\n          currency: 'USD',\n          minimumFractionDigits: 2,\n        });\n\n        cell.textContent = formattedValue;\n      } else {\n        cell.textContent = newValue;\n      }\n    } else {\n      cell.textContent = input.defaultValue;\n    }\n  }\n\n  function showNotification(title, message, type) {\n    notification.innerHTML = `<div class=\"${type} title\">${title}</div><div>${message}</div>`;\n    notification.classList.add(type);\n\n    setTimeout(() => {\n      notification.innerHTML = '';\n      notification.classList.remove(type);\n    }, 3000);\n  }\n});\n"]}